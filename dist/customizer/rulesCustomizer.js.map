{"version":3,"sources":["customizer/rulesCustomizer.ts"],"names":[],"mappings":"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","file":"rulesCustomizer.js","sourcesContent":["import {Promise} from 'es6-promise';\r\nimport {Map} from 'es6-shim';\r\nimport { IValidationRule } from '../interfaces/validationRule';\r\nimport { RequiredValidationRule } from '../validationRules/requiredValidationRule';\r\nimport { RealTimeServerValidationRule } from '../validationRules/serverValidationRule';\r\nimport { MinLenValidationRule } from '../validationRules/minLenValidationRule';\r\nimport { MaxLenValidationRule } from '../validationRules/maxLenValidationRule';\r\nimport { IRulesCustomizer } from '../interfaces/rulesCustomizer';\r\nimport { ValidationUtilities } from '../utils/validationUtilities';\r\n\r\n/**\r\n * helps to define validation rules for models.\r\n */\r\nexport class RulesCustomizer<T extends Object> implements IRulesCustomizer {\r\n\r\n    /**\r\n     * inits rules customizer.\r\n     * \r\n     * @param rulesMap\r\n     */\r\n    constructor(\r\n        private rulesMap: Map<string, IValidationRule[]> = new Map<string, IValidationRule[]>(),\r\n        private ruleSequense: Array<Array<IValidationRule>> = new Array<Array<IValidationRule>>()) {\r\n    }\r\n\r\n    /**\r\n     * makes field required.\r\n     * \r\n     * @param keyFunc\r\n     * @param message\r\n     */\r\n    public required(func: (obj: T) => void, message: string): void {\r\n        let key: string = ValidationUtilities.fromExpression<T>(func);\r\n        let rule: IValidationRule = new RequiredValidationRule(key, message);\r\n        this.addRule(key, rule);\r\n    }\r\n\r\n    /**\r\n     * max length valudation rule\r\n     * \r\n     * @param keyFunc\r\n     * @param value\r\n     * @param message\r\n     */\r\n    public maxlen(func: (obj: T) => void, value: number, message: string): void {\r\n        let key: string = ValidationUtilities.fromExpression<T>(func);\r\n        let rule: IValidationRule = new MaxLenValidationRule(key, value, message);\r\n        this.addRule(key, rule);\r\n    }\r\n\r\n    /**\r\n     * min length validation rule\r\n     * \r\n     * @param keyFunc\r\n     * @param value\r\n     * @param message\r\n     */\r\n    public minlen(func: (obj: T) => void, value: number, message: string): void {\r\n        let key: string = ValidationUtilities.fromExpression<T>(func);\r\n        let rule: IValidationRule = new MinLenValidationRule(key, value, message);\r\n        this.addRule(key, rule);\r\n    }\r\n\r\n    /**\r\n     * sets real time validation of the field.\r\n     * \r\n     * @param keyFunc\r\n     * @param validationCall\r\n     * @param message\r\n     */\r\n    public serverValidation(func: (obj: T) => void, validationCall: (value: any) => Promise<boolean>, message: string): void {\r\n        let key: string = ValidationUtilities.fromExpression<T>(func);\r\n        let rule: IValidationRule = new RealTimeServerValidationRule(key, validationCall, message);\r\n        this.addRule(key, rule);\r\n    }\r\n\r\n    /**\r\n     * adds validation rule to the dictionary.\r\n     * \r\n     * @param key\r\n     * @param rule\r\n     */\r\n    protected addRule(key: string, rule: IValidationRule): void {\r\n\r\n        if (!this.rulesMap[key]) {\r\n            this.rulesMap[key] = [];\r\n        }\r\n\r\n        this.rulesMap[key].push(rule);\r\n\r\n        let seqlIndex: number = this.rulesMap[key].length - 1;\r\n\r\n        if (!this.ruleSequense[seqlIndex]) {\r\n            this.ruleSequense[seqlIndex] = [];\r\n        }\r\n\r\n        this.ruleSequense[seqlIndex].push(rule);\r\n    }\r\n\r\n    /**\r\n     * gets the sequence rules for property.\r\n     */\r\n    public seqRules(key: string): Array<Array<IValidationRule>> {\r\n\r\n        let seqRules: Array<Array<IValidationRule>> = new Array<Array<IValidationRule>>();\r\n\r\n        let rules: IValidationRule[] = this.rulesMap[key];\r\n        if (rules && rules.length) {\r\n            for (let i: number = 0; i < this.rules.length; i++) {\r\n                seqRules[i] = [];\r\n                seqRules[i].push(rules[i]);\r\n            }\r\n        }\r\n\r\n        return seqRules;\r\n    }\r\n\r\n    /**\r\n     * gets all validation rules.\r\n     * \r\n     * @returns {Map<string, IValidationRule[]>}\r\n     */\r\n    public get rulesDictionary(): Map<string, IValidationRule[]> {\r\n        return this.rulesMap;\r\n    }\r\n\r\n    /**\r\n     * get rules sequence.\r\n     * \r\n     * @returns {Array<Array<IValidationRule>>}\r\n     */\r\n    public get rules(): Array<Array<IValidationRule>> {\r\n        return this.ruleSequense;\r\n    }\r\n}"]}