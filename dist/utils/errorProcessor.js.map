{"version":3,"sources":["utils/errorProcessor.ts"],"names":[],"mappings":"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","file":"errorProcessor.js","sourcesContent":["import 'angular';\r\n\r\nimport { ServerError } from '../models/serverError';\r\n\r\n/**\r\n * global methods for error processing.\r\n */\r\nexport class ErrorProcessor {\r\n\r\n    private static validationAttr: string = 'validationAttrs';\r\n    private static serverValidationAttr: string = 'serverValidation';\r\n    private static serverErrorsAttr: string = 'serverErrors';\r\n\r\n    /**\r\n    * sets/unsets error message\r\n    * \r\n    * @param isError\r\n    * @param fieldName\r\n    * @param ruleAttribute\r\n    */\r\n    public static setFieldError(fieldName: string, ruleAttribute: string, form: ng.IFormController): void {\r\n\r\n        form.$setValidity(fieldName, false, form);\r\n\r\n        if (!form.$error[fieldName][this.validationAttr]) {\r\n            form.$error[fieldName][this.validationAttr] = {};\r\n        }\r\n\r\n        form.$error[fieldName][this.validationAttr][ruleAttribute] = true;\r\n    }\r\n\r\n    /**\r\n     * adds the server error related to the field.\r\n     */\r\n    public static addServerFieldError(fieldName: string, errorMessage: string, form: ng.IFormController): void {\r\n\r\n        this.setFieldError(fieldName, this.serverValidationAttr, form);\r\n\r\n        if (!form.$error[fieldName][this.serverErrorsAttr]) {\r\n            form.$error[fieldName][this.serverErrorsAttr] = [];\r\n        }\r\n\r\n        form.$error[fieldName][this.serverErrorsAttr].push(new ServerError(errorMessage));\r\n    }\r\n\r\n    /**\r\n     *  clears all errors for field.\r\n     */\r\n    public static clearFieldErrors(fieldName: string, form: ng.IFormController): void {\r\n\r\n        form.$setValidity(fieldName, true, form);\r\n\r\n        if (form.$error && form.$error[fieldName]) {\r\n            form.$error[fieldName][this.validationAttr] = {};\r\n            form.$error[fieldName][this.serverErrorsAttr] = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n    * clears all validation errors.\r\n    */\r\n    public static clearAllFormErrors(form: ng.IFormController): void {\r\n\r\n        for (var attr in form.$error) {\r\n            if (form.$error.hasOwnProperty(attr)) {\r\n\r\n                this.clearFieldErrors(attr, form);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * checks if rule has error.\r\n    */\r\n    public static ruleHasError(fieldName: string, attribute: string, form: ng.IFormController): boolean {\r\n\r\n        if (!this.checkAttrs(fieldName, form, this.validationAttr)) {\r\n            return false;\r\n        }\r\n\r\n        return form.$error[fieldName].validationAttrs[attribute] === true;\r\n    }\r\n\r\n    /**\r\n     * returns the server errors for field\r\n     */\r\n    public static getFieldServerErrors(fieldName: string, form: ng.IFormController): ServerError[] {\r\n\r\n        let result: ServerError[] = [];\r\n\r\n        if (this.checkAttrs(fieldName, form, this.serverErrorsAttr)) {\r\n            result = form.$error[fieldName][this.serverErrorsAttr];\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * checks if field is valid.\r\n     */\r\n    public static isFieldValid(fieldName: string, form: ng.IFormController): boolean {\r\n\r\n        let isValid: boolean = true;\r\n\r\n        if (!form || !form.$error) {\r\n            return true;\r\n        }\r\n\r\n        for (var attr in form.$error) {\r\n            if (form.$error.hasOwnProperty(attr) && attr === fieldName) {\r\n\r\n                isValid = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    /**\r\n     * checks attrs for existance.\r\n     */\r\n    public static checkAttrs(fieldName: string, form: ng.IFormController, attr: string): boolean {\r\n\r\n        if (!form.$error || !form.$error[fieldName] || !form.$error[fieldName][attr]) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}"]}