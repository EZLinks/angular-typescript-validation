{"version":3,"sources":["utils/validationUtilities.ts"],"names":[],"mappings":";AAAA,mBAAiB;AAMjB;;GAEG;AACH;IAAA;IAsDA,CAAC;IApDG;;;;OAIG;IACW,iCAAa,GAA3B,UAA4B,KAAgB;QAExC,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAEjC,IAAI,SAAS,GAAQ,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACrC,IAAI,YAAY,GAAY,SAAS,IAA8B,SAAU,CAAC,eAAe,KAAK,SAAS;uBAC1E,SAAU,CAAC,IAAI,KAAK,SAAS,CAAC;gBAE/D,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBACf,MAAM,CAAC,SAAS,CAAC;gBACrB,CAAC;YACL,CAAC;QACL,CAAC;QAED,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACW,0BAAM,GAApB,UAAqB,MAAgB;QAEjC,EAAE,CAAC,CAAoB,MAAO,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;YACrD,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAED;;OAEG;IACW,kCAAc,GAA5B,UAAgC,IAAsB;QAElD,IAAI,YAAY,GAAW,IAAI,MAAM,CAAC,cAAc,CAAC,CAAC;QACtD,IAAI,CAAC,GAAoB,YAAY,CAAC,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC;QAEtD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,KAAK,GAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC3C,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,CAAC;QACL,CAAC;QAED,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IACjE,CAAC;IACL,0BAAC;AAAD,CAtDA,AAsDC,IAAA;AAtDY,kDAAmB","file":"validationUtilities.js","sourcesContent":["import 'angular';\r\n\r\nimport { IValidatableController } from '../controllers/validatableController';\r\nimport { IMessage } from '../interfaces/message';\r\nimport { IValidationRule } from '../interfaces/validationRule';\r\n\r\n/**\r\n * base methods for validation purposes.\r\n */\r\nexport class ValidationUtilities {\r\n\r\n    /**\r\n     * tries to find controller in scope\r\n     * \r\n     * @param scope\r\n     */\r\n    public static getController(scope: ng.IScope): IValidatableController {\r\n\r\n        for (var property in scope) {\r\n            if (scope.hasOwnProperty(property)) {\r\n\r\n                let candidate: any = scope[property];\r\n                let isController: boolean = candidate && (<IValidatableController> candidate).rulesCustomizer !== undefined\r\n                    && (<IValidatableController> candidate).form !== undefined;\r\n\r\n                if (isController) {\r\n                    return candidate;\r\n                }\r\n            }\r\n        }\r\n\r\n        throw new Error('Cannot find controller candidate.');\r\n    }\r\n\r\n    /**\r\n     * checks if object is rule.\r\n     */\r\n    public static IsRule(object: IMessage): boolean {\r\n\r\n        if ((<IValidationRule> object).attribute !== undefined) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * gets property name from expression.\r\n     */\r\n    public static fromExpression<T>(func: (obj: T) => void): string {\r\n\r\n        let varExtractor: RegExp = new RegExp('return (.*);');\r\n        let m: RegExpExecArray = varExtractor.exec(func + '');\r\n\r\n        if (m && m.length === 2) {\r\n            let parts: Array<string> = m[1].split('.');\r\n            if (parts.length === 2) {\r\n                return parts[1];\r\n            }\r\n        }\r\n\r\n        throw new Error('Cannot get property name from expression.');\r\n    }\r\n}"]}