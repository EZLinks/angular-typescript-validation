{"version":3,"sources":["services/validationService.ts"],"names":[],"mappings":";;AAAA,mBAAiB;AAEjB,0DAAyD;AAGzD,yDAAwD;AAmBxD;;GAEG;AACH;IAEI;;;;;;;OAOG;IACH,2BACc,UAAkC,EAClC,KAAgB;QAF9B,iBAIC;QAHa,eAAU,GAAV,UAAU,CAAwB;QAClC,UAAK,GAAL,KAAK,CAAW;QAuB9B;;WAEG;QACI,mBAAc,GAAG,UAAC,SAAiB,EAAE,WAAmB;YAE3D,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC;gBACd,+BAAc,CAAC,mBAAmB,CAAC,SAAS,EAAE,WAAW,EAAE,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACrF,CAAC,CAAC,CAAC;QACP,CAAC,CAAA;IA7BD,CAAC;IAED;;OAEG;IACI,oCAAQ,GAAf,UAAgB,MAAc;QAA9B,iBAcC;QAZG,+BAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAExD,OAAO,+BAAc,CAAC,cAAc,CAAC,MAAM,EACvC,IAAI,CAAC,UAAU,CAAC,eAAe,EAC/B,UAAC,IAAqB,EAAE,MAAe;YAEnC,IAAI,CAAC,MAAM,EAAE;gBACT,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC;oBACd,+BAAc,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,EAAE,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBAC1F,CAAC,CAAC,CAAC;aACN;QACL,CAAC,CAAC,CAAC;IACX,CAAC;IAWL,wBAAC;AAAD,CA5CA,AA4CC,IAAA;AA5CY,8CAAiB","file":"validationService.js","sourcesContent":["import 'angular';\r\n\r\nimport { ErrorProcessor } from '../utils/errorProcessor';\r\nimport { IValidationRule } from '../interfaces/validationRule';\r\nimport { IRulesCustomizer } from '../interfaces/rulesCustomizer';\r\nimport { ValidationCore } from '../core/validationCore';\r\nimport { IValidatableController } from '../controllers/validatableController';\r\n\r\n/**\r\n * service interface for validation.\r\n */\r\nexport interface IValidationService {\r\n\r\n    /**\r\n     * validation call.\r\n     */\r\n    validate(entity: Object): Promise<boolean>;\r\n\r\n    /**\r\n     * adds the server error to form validation.\r\n     */\r\n    addServerError(fieldName: string, errorMesage: string): void;\r\n}\r\n\r\n/**\r\n * base service class for validation purposes.\r\n */\r\nexport class ValidationService implements IValidationService {\r\n\r\n    /**\r\n     * inits controller.\r\n     *\r\n     * @param controller\r\n     * @param scope\r\n     * @param validator\r\n     * @param entity\r\n     */\r\n    constructor(\r\n        protected controller: IValidatableController,\r\n        protected scope: ng.IScope)\r\n    {\r\n    }\r\n\r\n    /**\r\n     * validation call.\r\n     */\r\n    public validate(entity: Object): Promise<boolean> {\r\n\r\n        ErrorProcessor.clearAllFormErrors(this.controller.form);\r\n\r\n        return ValidationCore.validateEntity(entity,\r\n            this.controller.rulesCustomizer,\r\n            (rule: IValidationRule, result: boolean) => {\r\n\r\n                if (!result) {\r\n                    this.scope.$apply(() => {\r\n                        ErrorProcessor.setFieldError(rule.propertyName, rule.attribute, this.controller.form);\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * adds the server error to form validation.\r\n     */\r\n    public addServerError = (fieldName: string, errorMesage: string) => {\r\n\r\n        this.scope.$apply(() => {\r\n            ErrorProcessor.addServerFieldError(fieldName, errorMesage, this.controller.form);\r\n        });\r\n    }\r\n}\r\n"]}