{"version":3,"sources":["controllers/validatableController.ts"],"names":[],"mappings":";AAAA,mBAAiB;AAGjB,0DAAyD;AAGzD,yDAAwD;AAExD;;GAEG;AACH;IAEI;;;;;;OAMG;IACH,+BAAsB,KAAgB,EAAS,eAAiC;QAAhF,iBACC;QADqB,UAAK,GAAL,KAAK,CAAW;QAAS,oBAAe,GAAf,eAAe,CAAkB;QAsBhF;;WAEG;QACO,mBAAc,GAAG,UAAC,SAAiB,EAAE,WAAmB;YAE9D,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC;gBACd,+BAAc,CAAC,mBAAmB,CAAC,SAAS,EAAE,WAAW,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC;QACP,CAAC,CAAA;IA7BD,CAAC;IAED;;OAEG;IACO,wCAAQ,GAAlB,UAAmB,MAAc;QAAjC,iBAcC;QAZG,+BAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7C,MAAM,CAAC,+BAAc,CAAC,cAAc,CAAC,MAAM,EACvC,IAAI,CAAC,eAAe,EACpB,UAAC,IAAqB,EAAE,MAAe;YAEnC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACV,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC;oBACd,+BAAc,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;gBAC/E,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC,CAAC;IACX,CAAC;IAiBD,sBAAW,uCAAI;QALf;;;;WAIG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACvC,CAAC;;;OAAA;IAML,4BAAC;AAAD,CAtDA,AAsDC,IAAA;AAtDqB,sDAAqB","file":"validatableController.js","sourcesContent":["import 'angular';\nimport {Promise} from 'es6-promise';\n\nimport { ErrorProcessor } from '../utils/errorProcessor';\nimport { IValidationRule } from '../interfaces/validationRule';\nimport { IRulesCustomizer } from '../interfaces/rulesCustomizer';\nimport { ValidationCore } from '../core/validationCore';\n\n/**\n * base controller class for validation purposes.\n */\nexport abstract class ValidatableController {\n\n    /**\n     * inits controller.\n     * \n     * @param scope\n     * @param validator\n     * @param entity\n     */\n    constructor(protected scope: ng.IScope, public rulesCustomizer: IRulesCustomizer) {\n    }\n\n    /**\n     * validation call.\n     */\n    protected validate(entity: Object): Promise<boolean> {\n\n        ErrorProcessor.clearAllFormErrors(this.form);\n\n        return ValidationCore.validateEntity(entity,\n            this.rulesCustomizer,\n            (rule: IValidationRule, result: boolean) => {\n\n                if (!result) {\n                    this.scope.$apply(() => {\n                        ErrorProcessor.setFieldError(rule.propertyName, rule.attribute, this.form);\n                    });\n                }\n            });\n    }\n\n    /**\n     * adds the server error to form validation.\n     */\n    protected addServerError = (fieldName: string, errorMesage: string) => {\n\n        this.scope.$apply(() => {\n            ErrorProcessor.addServerFieldError(fieldName, errorMesage, this.form);\n        });\n    }\n\n    /**\n     * gets the form scope\n     * \n     * @returns {ng.IFormController}\n     */\n    public get form(): ng.IFormController {\n        return this.scope[this.formName()];\n    }\n\n    /**\n     * validation form name.\n     */\n    public abstract formName(): string;\n}"]}