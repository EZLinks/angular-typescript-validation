{"version":3,"sources":["core/validationCore.ts"],"names":[],"mappings":";;AAAA,mBAAiB;AAKjB;;GAEG;AACH;IAAA;IA4EA,CAAC;IA1EG;;;;;;OAMG;IACW,6BAAc,GAA5B,UACI,MAAc,EACd,UAA4B,EAC5B,gBAAkE;QAClE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,UAAU,CAAC,KAAK,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAC;IAC7E,CAAC;IAED;;;;;;;OAOG;IACW,4BAAa,GAA3B,UACI,MAAc,EACd,QAAuC,EACvC,QAAgB,EAChB,gBAAkE;QAJtE,iBA8CC;QAvCG,IAAM,QAAQ,GAAuB,EAAE,CAAC;QACxC,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC7B,IAAI,KAAK,GAAsB,QAAQ,CAAC,QAAQ,CAAC,CAAC;gCAEzC,CAAC;YAEN,IAAI,IAAI,GAAoB,KAAK,CAAC,CAAC,CAAC,CAAC;YACrC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;;YAEZ,CAAC;YAED,IAAI,KAAK,GAAQ,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YAExE,IAAI,OAAO,GAAqB,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC;iBACvD,IAAI,CAAC,UAAA,MAAM;gBAER,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;gBAE/B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACV,QAAQ,GAAG,KAAK,CAAC;gBACrB,CAAC;gBAED,MAAM,CAAC,MAAM,CAAC;YAClB,CAAC,CAAC,CAAC;YAEP,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC;QAtBD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;oBAApC,CAAC;SAsBT;QAED,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;aACvB,IAAI,CAAC;YAEF,QAAQ,EAAE,CAAC;YAEX,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzC,MAAM,CAAC,KAAI,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC;YAC5E,CAAC;YAED,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC,CAAC,CAAC;IACX,CAAC;IAEc,2BAAY,GAA3B,UAA4B,IAAY,EAAE,GAAW,EAAE,SAAe;QAAf,0BAAA,EAAA,eAAe;QACxE,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA;QACtC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,IAAI,IAAK,OAAA,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,EAAlB,CAAkB,EAAE,GAAG,CAAC,CAAC;IAChE,CAAC;IACL,qBAAC;AAAD,CA5EA,AA4EC,IAAA;AA5EY,wCAAc","file":"validationCore.js","sourcesContent":["import 'angular';\r\n\r\nimport { IValidationRule } from '../interfaces/validationRule';\r\nimport { IRulesCustomizer } from '../interfaces/rulesCustomizer';\r\n\r\n/**\r\n * base methods for validation purposes.\r\n */\r\nexport class ValidationCore {\r\n\r\n    /**\r\n     * makes entity validation - client side and real time server side.\r\n     *\r\n     * @param entity\r\n     * @param customizer\r\n     * @param handleRuleResult\r\n     */\r\n    public static validateEntity(\r\n        entity: Object,\r\n        customizer: IRulesCustomizer,\r\n        handleRuleResult: (rule: IValidationRule, result: boolean) => void): Promise<boolean> {\r\n        return this.validateRules(entity, customizer.rules, 0, handleRuleResult);\r\n    }\r\n\r\n    /**\r\n     * recursively validates rules.\r\n     *\r\n     * @param entity\r\n     * @param seqRules\r\n     * @param sequence\r\n     * @param handleRuleResult\r\n     */\r\n    public static validateRules(\r\n        entity: Object,\r\n        seqRules: Array<Array<IValidationRule>>,\r\n        sequence: number,\r\n        handleRuleResult: (rule: IValidationRule, result: boolean) => void\r\n    ): Promise<boolean> {\r\n\r\n        const promises: Promise<boolean>[] = [];\r\n        let allValid: boolean = true;\r\n        let rules: IValidationRule[] = seqRules[sequence];\r\n\r\n        for (let i: number = 0; i < rules.length; i++) {\r\n\r\n            let rule: IValidationRule = rules[i];\r\n            if (!rule) {\r\n                continue;\r\n            }\r\n\r\n            let value: any = ValidationCore.resolveValue(rule.propertyName, entity);\r\n\r\n            let promise: Promise<boolean> = rule.validate(entity, value)\r\n                .then(result => {\r\n\r\n                    handleRuleResult(rule, result);\r\n\r\n                    if (!result) {\r\n                        allValid = false;\r\n                    }\r\n\r\n                    return result;\r\n                });\r\n\r\n            promises.push(promise);\r\n        }\r\n\r\n        return Promise.all(promises)\r\n            .then(() => {\r\n\r\n                sequence++;\r\n\r\n                if (allValid && sequence < seqRules.length) {\r\n                    return this.validateRules(entity, seqRules, sequence, handleRuleResult);\r\n                }\r\n\r\n                return allValid;\r\n            });\r\n    }\r\n\r\n    private static resolveValue(path: string, obj: Object, separator = '.') {\r\n\t\tvar properties = path.split(separator)\r\n\t\treturn properties.reduce((prev, curr) => prev && prev[curr], obj);\t\t\r\n    }\r\n}\r\n"]}