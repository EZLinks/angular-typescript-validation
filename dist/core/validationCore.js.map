{"version":3,"sources":["core/validationCore.ts"],"names":[],"mappings":";AAAA,mBAAiB;AACjB,2CAAoC;AAKpC;;GAEG;AACH;IAAA;IAmEA,CAAC;IAjEG;;;;;;OAMG;IACW,6BAAc,GAA5B,UACI,MAAc,EACd,UAA4B,EAC5B,gBAAkE;QAClE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,UAAU,CAAC,KAAK,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAC;IAC7E,CAAC;IAED;;;;;;;OAOG;IACW,4BAAa,GAA3B,UACI,MAAc,EACd,QAAuC,EACvC,QAAgB,EAChB,gBAAkE;QAJtE,iBA0CC;QAnCG,IAAM,QAAQ,GAAuB,EAAE,CAAC;QACxC,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC7B,IAAI,KAAK,GAAsB,QAAQ,CAAC,QAAQ,CAAC,CAAC;gCAEzC,CAAC;YAEN,IAAI,IAAI,GAAoB,KAAK,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,KAAK,GAAQ,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAE3C,IAAI,OAAO,GAAqB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;iBAC/C,IAAI,CAAC,UAAA,MAAM;gBAER,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;gBAE/B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACV,QAAQ,GAAG,KAAK,CAAC;gBACrB,CAAC;gBAED,MAAM,CAAC,MAAM,CAAC;YAClB,CAAC,CAAC,CAAC;YAEP,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC;QAlBD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;oBAApC,CAAC;SAkBT;QAED,MAAM,CAAC,qBAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;aACvB,IAAI,CAAC;YAEH,QAAQ,EAAE,CAAC;YAEV,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzC,MAAM,CAAC,KAAI,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC;YAC5E,CAAC;YAED,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC,CAAC,CAAC;IACX,CAAC;IACL,qBAAC;AAAD,CAnEA,AAmEC,IAAA;AAnEY,wCAAc","file":"validationCore.js","sourcesContent":["import 'angular';\nimport {Promise} from 'es6-promise';\n\nimport { IValidationRule } from '../interfaces/validationRule';\nimport { IRulesCustomizer } from '../interfaces/rulesCustomizer';\n\n/**\n * base methods for validation purposes.\n */\nexport class ValidationCore {\n\n    /**\n     * makes entity validation - client side and real time server side.\n     * \n     * @param entity\n     * @param customizer\n     * @param handleRuleResult\n     */\n    public static validateEntity(\n        entity: Object,\n        customizer: IRulesCustomizer,\n        handleRuleResult: (rule: IValidationRule, result: boolean) => void): Promise<boolean> {\n        return this.validateRules(entity, customizer.rules, 0, handleRuleResult);\n    }\n\n    /**\n     * recursively validates rules.\n     * \n     * @param entity\n     * @param seqRules\n     * @param sequence\n     * @param handleRuleResult\n     */\n    public static validateRules(\n        entity: Object,\n        seqRules: Array<Array<IValidationRule>>,\n        sequence: number,\n        handleRuleResult: (rule: IValidationRule, result: boolean) => void\n    ): Promise<boolean> {\n\n        const promises: Promise<boolean>[] = [];\n        let allValid: boolean = true;\n        let rules: IValidationRule[] = seqRules[sequence];\n\n        for (let i: number = 0; i < rules.length; i++) {\n\n            let rule: IValidationRule = rules[i];\n            let value: any = entity[rule.propertyName];\n\n            let promise: Promise<boolean> = rule.validate(value)\n                .then(result => {\n\n                    handleRuleResult(rule, result);\n\n                    if (!result) {\n                        allValid = false;\n                    }\n\n                    return result;\n                });\n\n            promises.push(promise);\n        }\n\n        return Promise.all(promises)\n            .then(() => {\n\n               sequence++;\n\n                if (allValid && sequence < seqRules.length) {\n                    return this.validateRules(entity, seqRules, sequence, handleRuleResult);\n                }\n\n                return allValid;\n            });\n    }\n}"]}