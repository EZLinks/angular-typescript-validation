{"version":3,"sources":["directives/validatableField/validatableField.ts"],"names":[],"mappings":"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","file":"validatableField.js","sourcesContent":["import 'angular';\r\n\r\nimport { IValidationRule } from '../../interfaces/validationRule';\r\nimport { InitValidationModuleProvider } from '../../init/initValidationModuleProvider';\r\nimport { IValidatableController } from '../../controllers/validatableController';\r\nimport { ValidationUtilities } from '../../utils/validationUtilities';\r\nimport { ErrorProcessor } from '../../utils/errorProcessor';\r\nimport { ValidationCore } from '../../core/validationCore';\r\n\r\n/**\r\n * directive for validation purposes.\r\n * inits watch on the model and validates changes in the model automatically.\r\n */\r\nexport class ValidatableFieldDirective implements ng.IDirective {\r\n\r\n    public restrict: string = 'A';\r\n    public require: string = 'ngModel';\r\n    public scope: any = { validatableField: '=' };\r\n\r\n    /**\r\n     * creates a new instance of directive\r\n     */\r\n    public static factory(): ValidatableFieldDirective {\r\n        return new ValidatableFieldDirective();\r\n    }\r\n\r\n    /**\r\n     * link for directive.\r\n     *\r\n     * @param scope\r\n     * @param element\r\n     * @param attrs\r\n     * @param ctrl\r\n     */\r\n    public link(scope: any, element: ng.IAugmentedJQuery, attrs: ng.IAttributes): void {\r\n\r\n        let worker: DirectiveWorker = new DirectiveWorker();\r\n        let basicController: IValidatableController = ValidationUtilities.getController(scope.validatableField);\r\n        if (worker.initFields(scope, element, attrs, basicController)) {\r\n            worker.watchModel(scope);\r\n            worker.watchError(scope);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * class for processing directive tasks.\r\n */\r\nclass DirectiveWorker {\r\n\r\n    private element: any;\r\n    private fieldName: string;\r\n    private seqRules: Array<Array<IValidationRule>>;\r\n    private form: ng.IFormController;\r\n\r\n    private timer: any = null;\r\n\r\n    /**\r\n     * inits the main fields needed to proper work of the directive.\r\n     *\r\n     * @param scope - scope\r\n     * @param element - input element\r\n     * @param attrs - element attributes.\r\n     * @param ctrl - controller.\r\n     * @returns {boolean}\r\n     */\r\n    public initFields(\r\n        scope: ng.IScope,\r\n        element: ng.IAugmentedJQuery,\r\n        attrs: ng.IAttributes,\r\n        ctrl: IValidatableController): boolean {\r\n\r\n        this.element = element;    \r\n        this.fieldName = attrs['name'];\r\n        this.form = ctrl.form;\r\n        this.seqRules = ctrl.rulesCustomizer.seqRules(this.fieldName);\r\n\r\n        if (this.seqRules && this.seqRules.length) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * makes a watch on the model value.\r\n     *\r\n     * @param scope - scope\r\n     * @param attr - element attributes\r\n     */\r\n    public watchModel(scope: ng.IScope): void {\r\n\r\n        scope.$watch(`validatableField.model.${this.fieldName}`,\r\n            (newVal: any, oldVal: any) => {\r\n\r\n                if (newVal !== oldVal) {\r\n\r\n                    ErrorProcessor.clearFieldErrors(this.fieldName, this.form);\r\n\r\n                    if (this.timer) {\r\n                        clearTimeout(this.timer);\r\n                    }\r\n\r\n                    this.timer = setTimeout(() => {\r\n\r\n                            let entity: Object = {};\r\n                            entity[this.fieldName] = newVal;\r\n\r\n                            ValidationCore.validateRules(entity,\r\n                                this.seqRules,\r\n                                0,\r\n                                (rule: IValidationRule, result: boolean) => {\r\n\r\n                                    if (!result) {\r\n                                        scope.$apply(() => {\r\n                                            ErrorProcessor.setFieldError(this.fieldName, rule.attribute, this.form);\r\n                                        });\r\n                                    }\r\n                                });\r\n                        },\r\n                        InitValidationModuleProvider.config.validationTimoutMs);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * makes watch to apply error to field if needed.\r\n     * \r\n     * @param scope\r\n     */\r\n    public watchError(scope: ng.IScope): void {\r\n\r\n        scope.$watch(`validatableField.form.$error.${this.fieldName}`,\r\n            (newVal: any, oldVal: any) => {\r\n\r\n                if (newVal !== oldVal) {\r\n                    let isFieldValid = ErrorProcessor.isFieldValid(this.fieldName, this.form);\r\n                    InitValidationModuleProvider.config.fieldErrorHandler(!isFieldValid, this.element, this.fieldName);\r\n                }\r\n            });\r\n    }\r\n}\r\n"]}