{"version":3,"sources":["directives/validatableField/validatableField.ts"],"names":[],"mappings":"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","file":"validatableField.js","sourcesContent":["import 'angular';\n\nimport { IValidationRule } from '../../interfaces/validationRule';\nimport { InitValidationModuleProvider } from '../../init/initValidationModuleProvider';\nimport { ValidatableController } from '../../controllers/validatableController';\nimport { ValidationUtilities } from '../../utils/validationUtilities';\nimport { ErrorProcessor } from '../../utils/errorProcessor';\nimport { ValidationCore } from '../../core/validationCore';\n\n/**\n * directive for validation purposes.\n * inits watch on the model and validates changes in the model automatically.\n */\nexport class ValidatableFieldDirective implements ng.IDirective {\n\n    public restrict: string = 'A';\n    public require: string = 'ngModel';\n\n    /**\n     * creates a new instance of directive\n     */\n    public static factory(): ValidatableFieldDirective {\n        return new ValidatableFieldDirective();\n    }\n\n    /**\n     * link for directive.\n     *\n     * @param scope\n     * @param element\n     * @param attrs\n     * @param ctrl\n     */\n    public link(scope: ng.IScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes): void {\n\n        let worker: DirectiveWorker = new DirectiveWorker();\n        let basicController: ValidatableController = ValidationUtilities.getController(scope);\n        if (worker.initFields(scope, element, attrs, basicController)) {\n            worker.watchModel(scope, attrs);\n        }\n    }\n}\n\n/**\n * class for processing directive tasks.\n */\nclass DirectiveWorker {\n\n    private fieldName: string;\n    private seqRules: Array<Array<IValidationRule>>;\n    private form: ng.IFormController;\n\n    private timer: any = null;\n\n    /**\n     * inits the main fields needed to proper work of the directive.\n     *\n     * @param scope - scope\n     * @param element - input element\n     * @param attrs - element attributes.\n     * @param ctrl - controller.\n     * @returns {boolean}\n     */\n    public initFields(\n        scope: ng.IScope,\n        element: ng.IAugmentedJQuery,\n        attrs: ng.IAttributes,\n        ctrl: ValidatableController): boolean {\n\n        this.fieldName = attrs['name'];\n        this.form = ctrl.form;\n        this.seqRules = ctrl.rulesCustomizer.seqRules(this.fieldName);\n\n        if (this.seqRules && this.seqRules.length) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * makes a watch on the model value.\n     *\n     * @param scope - scope\n     * @param attr - element attributes\n     */\n    public watchModel(scope: ng.IScope, attr: ng.IAttributes): void {\n\n        scope.$watch(attr['ngModel'],\n            (newVal: any, oldVal: any) => {\n\n                if (newVal !== oldVal) {\n\n                    ErrorProcessor.clearFieldErrors(this.fieldName, this.form);\n\n                    if (this.timer) {\n                        clearTimeout(this.timer);\n                    }\n\n                    this.timer = setTimeout(() => {\n\n                            let entity: Object = {};\n                            entity[this.fieldName] = newVal;\n\n                            ValidationCore.validateRules(entity,\n                                this.seqRules,\n                                0,\n                                (rule: IValidationRule, result: boolean) => {\n\n                                    if (!result) {\n                                        scope.$apply(() => {\n                                            ErrorProcessor.setFieldError(this.fieldName, rule.attribute, this.form);\n                                        });\n                                    }\n                                });\n                        },\n                        InitValidationModuleProvider.config.validationTimoutMs);\n                }\n            });\n    }\n}\n"]}