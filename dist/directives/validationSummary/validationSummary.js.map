{"version":3,"sources":["directives/validationSummary/validationSummary.ts"],"names":[],"mappings":"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","file":"validationSummary.js","sourcesContent":["import 'angular';\r\n\r\nimport { IValidationRule } from '../../interfaces/validationRule';\r\nimport { IValidatableController } from '../../controllers/validatableController';\r\nimport { InitValidationModuleProvider } from '../../init/initValidationModuleProvider';\r\nimport { ValidationUtilities } from '../../utils/validationUtilities';\r\nimport { ErrorProcessor } from '../../utils/errorProcessor';\r\nimport { IMessage } from '../../interfaces/message';\r\n\r\n/**\r\n * directive for validation mesages display.\r\n */\r\nexport class ValidationSummaryDirective implements ng.IDirective {\r\n\r\n    public restrict: string = 'E';\r\n    public scope: any = { ctrl: '=' };\r\n    public controller: any = ValidationSummaryController;\r\n    public controllerAs: string = 'vs';\r\n    public template: string;\r\n\r\n    /**\r\n     * creates a new instance of directive\r\n     */\r\n    public static factory(): ValidationSummaryDirective {\r\n        return new ValidationSummaryDirective();\r\n    }\r\n\r\n    /**\r\n     * inits directive\r\n     */\r\n    constructor() {\r\n        this.template = InitValidationModuleProvider.config.summaryTemplateHtml;\r\n    }\r\n\r\n    /**\r\n     * link for directive.\r\n     * \r\n     * @param scope\r\n     * @param element\r\n     * @param attrs\r\n     * @param ctrl\r\n     */\r\n    public link(scope: any, element: ng.IAugmentedJQuery, attrs: ng.IAttributes, ctrl: ValidationSummaryController): void {\r\n\r\n        let basicController: IValidatableController = ValidationUtilities.getController(scope.ctrl);\r\n        ctrl.initFields(scope, element, attrs, basicController);\r\n    }\r\n}\r\n\r\n/**\r\n * controller class\r\n */\r\nexport class ValidationSummaryController {\r\n\r\n    private form: ng.IFormController;\r\n    private rules: Map<string, IValidationRule[]>;\r\n\r\n    /**\r\n     * inits the main fields needed to proper work of the directive.\r\n     * \r\n     * @param scope - scope\r\n     * @param element - input element\r\n     * @param attrs - element attributes.\r\n     * @param ctrl - controller.\r\n     * @returns {boolean}\r\n     */\r\n    public initFields(scope: ng.IScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes, ctrl: IValidatableController): void {\r\n\r\n        this.form = ctrl.form;\r\n        this.rules = ctrl.rulesCustomizer.rulesDictionary;\r\n    }\r\n\r\n    /**\r\n     * checks if error could be shown.\r\n     */\r\n    public showError = (error: IMessage): boolean => {\r\n\r\n        if (ValidationUtilities.IsRule(error)) {\r\n            let rule: IValidationRule = <IValidationRule>error;\r\n            return ErrorProcessor.ruleHasError(rule.propertyName, rule.attribute, this.form);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * gets the errors for this field.\r\n     */\r\n    public get errors(): IMessage[] {\r\n\r\n        let ruleMessagesNonDuplicated: IMessage[] = [];\r\n        let ruleMessages: IMessage[] = [];\r\n        let messageStrings: object = {};\r\n\r\n        for (let rule in this.rules) {\r\n\r\n            if (this.rules.hasOwnProperty(rule)) {\r\n\r\n                let serverErrors: IMessage[] = ErrorProcessor.getFieldServerErrors(rule, this.form);\r\n\r\n                ruleMessages = ruleMessages.concat(this.rules[rule]);\r\n                ruleMessages = ruleMessages.concat(serverErrors as any);\r\n            }\r\n        }\r\n        \r\n        for (let i = 0; i < ruleMessages.length; i++) { \r\n            \r\n            let currentMessage = ruleMessages[i];\r\n\r\n            if (!messageStrings[currentMessage.message]) {\r\n                ruleMessagesNonDuplicated.push(currentMessage);\r\n                messageStrings[currentMessage.message] = true;\r\n            }\r\n        }\r\n\r\n        return ruleMessagesNonDuplicated;\r\n    }\r\n\r\n    /**\r\n     * Checks if form has errors.\r\n     */\r\n    public hasErrors = () => {\r\n        return this.form.$valid === false;\r\n    }\r\n}"]}