{"version":3,"sources":["directives/validationMessage/validationMessage.ts"],"names":[],"mappings":"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","file":"validationMessage.js","sourcesContent":["import 'angular';\r\n\r\nimport { IValidationRule } from '../../interfaces/validationRule';\r\nimport { IValidatableController } from '../../controllers/validatableController';\r\nimport { InitValidationModuleProvider } from '../../init/initValidationModuleProvider';\r\nimport { ValidationUtilities } from '../../utils/validationUtilities';\r\nimport { ErrorProcessor } from '../../utils/errorProcessor';\r\nimport { IMessage } from '../../interfaces/message';\r\n\r\n/**\r\n * interface for scope\r\n */\r\nexport interface IValidationMessageScope extends ng.IScope {\r\n    rules: IValidationRule[];\r\n}\r\n\r\n/**\r\n * controller class\r\n */\r\nexport class ValidationMessageController {\r\n\r\n    public static $inject: string[] = ['$scope'];\r\n    constructor(public $scope: IValidationMessageScope) {\r\n    }\r\n}\r\n\r\n/**\r\n * directive for validation mesages display.\r\n */\r\nexport class ValidationMessageDirective implements ng.IDirective {\r\n\r\n    public restrict: string = 'E';\r\n    public scope: any = { ctrl: '=' };\r\n    public controller: any = ValidationMessageController;\r\n    public controllerAs: string = 'vm';\r\n    public replace: boolean = true;\r\n    public template: string;\r\n\r\n    /**\r\n     * creates a new instance of directive\r\n     */\r\n    public static factory(): ValidationMessageDirective {\r\n        return new ValidationMessageDirective();\r\n    }\r\n\r\n    /**\r\n     * inits directive\r\n     */\r\n    constructor() {\r\n        this.template = InitValidationModuleProvider.config.templateHtml;\r\n    }\r\n\r\n    /**\r\n     * link for directive.\r\n     * \r\n     * @param scope\r\n     * @param element\r\n     * @param attrs\r\n     * @param ctrl\r\n     */\r\n    public link(scope: any, element: ng.IAugmentedJQuery, attrs: ng.IAttributes): void {\r\n\r\n        let worker: DirectiveWorker = new DirectiveWorker();\r\n        let basicController: IValidatableController = ValidationUtilities.getController(scope.ctrl);\r\n        worker.initFields(scope, element, attrs, basicController);\r\n    }\r\n}\r\n\r\nclass DirectiveWorker {\r\n\r\n    private fieldName: string;\r\n    private element: any;\r\n    private form: ng.IFormController;\r\n    private rules: IValidationRule[];\r\n    private controllerAs: string = 'vm';\r\n\r\n    /**\r\n     * inits the main fields needed to proper work of the directive.\r\n     * \r\n     * @param scope - scope\r\n     * @param element - input element\r\n     * @param attrs - element attributes.\r\n     * @param ctrl - controller.\r\n     * @returns {boolean}\r\n     */\r\n    public initFields(scope: ng.IScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes, ctrl: IValidatableController): void {\r\n\r\n        this.element = element;\r\n        this.fieldName = attrs['for'];\r\n        this.form = ctrl.form;\r\n        this.rules = ctrl.rulesCustomizer.rulesDictionary[this.fieldName];\r\n\r\n        if (!this.rules) {\r\n            this.rules = [];\r\n        }\r\n\r\n        scope[this.controllerAs].isFieldValid = this.isFieldValid;\r\n        scope[this.controllerAs].errors = this.errors;\r\n        scope[this.controllerAs].showError = this.showError;\r\n\r\n        if (!this.fieldName) {\r\n            throw new Error('Empty field name.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * checks if error could be shown.\r\n     */\r\n    private showError = (error: IMessage): boolean => {\r\n\r\n        if (ValidationUtilities.IsRule(error)) {\r\n            let rule: IValidationRule = <IValidationRule>error;\r\n            return ErrorProcessor.ruleHasError(this.fieldName, rule.attribute, this.form);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * gets the errors for this field.\r\n     */\r\n    private errors = (): IMessage[] => {\r\n\r\n        let rulesMessage: IMessage[] = this.rules;\r\n        let serverErrors: IMessage[] = ErrorProcessor.getFieldServerErrors(this.fieldName, this.form);\r\n\r\n        return rulesMessage.concat(serverErrors);\r\n    }\r\n\r\n    /**\r\n     * checks if field is valid.\r\n     */\r\n    private isFieldValid = (): boolean => {\r\n        return ErrorProcessor.isFieldValid(this.fieldName, this.form);\r\n    }\r\n}"]}