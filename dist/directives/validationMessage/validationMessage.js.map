{"version":3,"sources":["directives/validationMessage/validationMessage.ts"],"names":[],"mappings":"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","file":"validationMessage.js","sourcesContent":["import 'angular';\n\nimport { IValidationRule } from '../../interfaces/validationRule';\nimport { ValidatableController } from '../../controllers/validatableController';\nimport { InitValidationModuleProvider } from '../../init/initValidationModuleProvider';\nimport { ValidationUtilities } from '../../utils/validationUtilities';\nimport { ErrorProcessor } from '../../utils/errorProcessor';\nimport { IMessage } from '../../interfaces/message';\n\n/**\n * interface for scope\n */\nexport interface IValidationMessageScope extends ng.IScope {\n    rules: IValidationRule[];\n}\n\n/**\n * controller class\n */\nexport class ValidationMessageController {\n\n    public static $inject: string[] = ['$scope'];\n    constructor(public $scope: IValidationMessageScope) {\n    }\n}\n\n/**\n * directive for validation mesages display.\n */\nexport class ValidationMessageDirective implements ng.IDirective {\n\n    public restrict: string = 'E';\n    public scope: any = {};\n    public controller: any = ValidationMessageController;\n    public controllerAs: string = 'vm';\n    public replace: boolean = true;\n    public template: string;\n\n    /**\n     * creates a new instance of directive\n     */\n    public static factory(): ValidationMessageDirective {\n        return new ValidationMessageDirective();\n    }\n\n    /**\n     * inits directive\n     */\n    constructor() {\n        this.template = InitValidationModuleProvider.config.templateHtml;\n    }\n\n    /**\n     * link for directive.\n     * \n     * @param scope\n     * @param element\n     * @param attrs\n     * @param ctrl\n     */\n    public link(scope: ng.IScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes): void {\n\n        let worker: DirectiveWorker = new DirectiveWorker();\n        let basicController: ValidatableController = ValidationUtilities.getController(scope.$parent);\n        worker.initFields(scope, element, attrs, basicController);\n        worker.watchError(scope);\n    }\n}\n\nclass DirectiveWorker {\n\n    private fieldName: string;\n    private formName: string;\n    private element: any;\n    private form: ng.IFormController;\n    private rules: IValidationRule[];\n    private controllerAs: string = 'vm';\n\n    /**\n     * inits the main fields needed to proper work of the directive.\n     * \n     * @param scope - scope\n     * @param element - input element\n     * @param attrs - element attributes.\n     * @param ctrl - controller.\n     * @returns {boolean}\n     */\n    public initFields(scope: ng.IScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes, ctrl: ValidatableController): void {\n\n        this.element = element;\n        this.fieldName = attrs['for'];\n        this.form = ctrl.form;\n        this.formName = ctrl.formName();\n        this.rules = ctrl.rulesCustomizer.rulesDictionary[this.fieldName];\n\n        if (!this.rules) {\n            this.rules = [];\n        }\n\n        scope[this.controllerAs].isFieldValid = this.isFieldValid;\n        scope[this.controllerAs].errors = this.errors;\n        scope[this.controllerAs].showError = this.showError;\n\n        if (!this.fieldName) {\n            throw new Error('Empty field name.');\n        }\n    }\n\n    /**\n     * makes watch to apply error to field if needed.\n     * \n     * @param scope\n     */\n    public watchError(scope: ng.IScope): void {\n\n        scope.$parent.$watch(`${this.formName}.$error.${this.fieldName}`,\n            (newVal: any, oldVal: any) => {\n\n                if (newVal !== oldVal) {\n                    InitValidationModuleProvider.config.fieldErrorHandler(!this.isFieldValid(), this.element, this.fieldName);\n                }\n            }, true\n        );\n    }\n\n    /**\n     * checks if error could be shown.\n     */\n    private showError = (error: IMessage): boolean => {\n\n        if (ValidationUtilities.IsRule(error)) {\n            let rule: IValidationRule = <IValidationRule>error;\n            return ErrorProcessor.ruleHasError(this.fieldName, rule.attribute, this.form);\n        }\n\n        return true;\n    }\n\n    /**\n     * gets the errors for this field.\n     */\n    private errors = (): IMessage[] => {\n\n        let rulesMessage: IMessage[] = this.rules;\n        let serverErrors: IMessage[] = ErrorProcessor.getFieldServerErrors(this.fieldName, this.form);\n\n        return rulesMessage.concat(serverErrors);\n    }\n\n    /**\n     * checks if field is valid.\n     */\n    private isFieldValid = (): boolean => {\n        return ErrorProcessor.isFieldValid(this.fieldName, this.form);\n    }\n}"]}