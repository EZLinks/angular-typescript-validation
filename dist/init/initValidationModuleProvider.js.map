{"version":3,"sources":["init/initValidationModuleProvider.ts"],"names":[],"mappings":";AAAA,mBAAiB;AAEjB,+DAA8D;AAE9D;;GAEG;AACH;IAAA;IA+DA,CAAC;IA3DG;;OAEG;IACW,iCAAI,GAAlB,UAAmB,MAAyB;QAExC,qBAAqB;QACrB,IAAI,CAAC,aAAa,GAAG,IAAI,mCAAgB,EAAE,CAAC;QAE5C,IAAI,CAAC,aAAa,CAAC,iBAAiB,GAAG,UAAC,OAAgB,EAAE,OAAY,EAAE,SAAiB;YACrF,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC5D,CAAC,CAAC;QAEF,IAAI,CAAC,aAAa,CAAC,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC;QAC3D,IAAI,CAAC,aAAa,CAAC,kBAAkB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAE9D,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YAET,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,EAAE,mBAAmB,EAAE,MAAM,CAAC,iBAAiB,CAAC,CAAC;YACrF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,EAAE,aAAa,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;YAC1E,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,EAAE,oBAAoB,EAAE,MAAM,CAAC,kBAAkB,CAAC,CAAC;QAC3F,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAED;;OAEG;IACY,yCAAY,GAA3B,UAA4B,GAAW,EAAE,SAAiB,EAAE,KAAU;QAElE,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;YACtB,GAAG,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;QAC3B,CAAC;IACL,CAAC;IAKD,sBAAmB,gDAAgB;QAHnC;;WAEG;aACH;YACI,MAAM,CAAC,GAAG,CAAC;QACf,CAAC;;;OAAA;IAKD,sBAAmB,mDAAmB;QAHtC;;WAEG;aACH;YACI,MAAM,CAAC,2SAIQ,CAAC;QACpB,CAAC;;;OAAA;IAKD,sBAAkB,sCAAM;QAHxB;;WAEG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC9B,CAAC;;;OAAA;IACL,mCAAC;AAAD,CA/DA,AA+DC;AA7DkB,0CAAa,GAAqB,4BAA4B,CAAC,IAAI,EAAE,CAAC;AAF5E,oEAA4B","file":"initValidationModuleProvider.js","sourcesContent":["import 'angular';\n\nimport { ValidationConfig } from '../config/validationConfig';\n\n/**\n * for module init purposes.\n */\nexport class InitValidationModuleProvider {\n\n    private static configuration: ValidationConfig = InitValidationModuleProvider.init();\n\n    /**\n     * inits validation module.\n     */\n    public static init(config?: ValidationConfig): ValidationConfig {\n\n        // init configuration\n        this.configuration = new ValidationConfig();\n\n        this.configuration.fieldErrorHandler = (isError: boolean, element: any, fieldName: string) => {\n            element.parents('.field').toggleClass('error', isError);\n        };\n\n        this.configuration.templateHtml = this.defaultTemplateHtml;\n        this.configuration.validationTimoutMs = this.defaultTimeoutMs;\n\n        if (config) {\n\n            this.setIfDefined(this.configuration, 'fieldErrorHandler', config.fieldErrorHandler);\n            this.setIfDefined(this.configuration, 'templateUrl', config.templateHtml);\n            this.setIfDefined(this.configuration, 'validationTimoutMs', config.validationTimoutMs);\n        }\n\n        return this.configuration;\n    }\n\n    /**\n     * sets value to object if value is defined.\n     */\n    private static setIfDefined(obj: Object, fieldName: string, value: any): void {\n\n        if (value !== undefined) {\n            obj[fieldName] = value;\n        }\n    }\n\n    /**\n     * default timeout validation.\n     */\n    private static get defaultTimeoutMs(): number {\n        return 100;\n    }\n\n    /**\n     * default messages template Html.\n     */\n    private static get defaultTemplateHtml(): string {\n        return `<div class=\"ui error message\" style=\"display: block;\" ng-show=\"vm.isFieldValid() === false\"> \n                <ul class=\"list\"> \n                <li ng-repeat=\"error in vm.errors()\" ng-show=\"vm.showError(error)\">{{ error.message }}</li>\n                </ul>\n                </div>`;\n    }\n\n    /**\n     * gets the config.\n     */\n    public static get config(): ValidationConfig {\n        return this.configuration;\n    }\n}"]}