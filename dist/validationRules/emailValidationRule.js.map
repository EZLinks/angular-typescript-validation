{"version":3,"sources":["validationRules/emailValidationRule.ts"],"names":[],"mappings":";;AAEA;;GAEG;AACH;IACI;;;;OAIG;IACH,6BAAmB,YAAoB,EAAS,OAAe;QAA5C,iBAAY,GAAZ,YAAY,CAAQ;QAAS,YAAO,GAAP,OAAO,CAAQ;IAC/D,CAAC;IAOD,sBAAW,0CAAS;QALpB;;;;WAIG;aACH;YACI,OAAO,OAAO,CAAC;QACnB,CAAC;;;OAAA;IAED;;;;OAIG;IACI,sCAAQ,GAAf,UAAgB,MAAW,EAAE,KAAU;QACnC,IAAI,OAAO,GAAqB,IAAI,OAAO,CAAC,UAAC,OAAO;YAChD,yBAAyB;YACzB,IAAI,KAAK,GAAG,4aAA4a,CAAC;YACzb,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC;IACnB,CAAC;IACL,0BAAC;AAAD,CAhCA,AAgCC,IAAA;AAhCY,kDAAmB","file":"emailValidationRule.js","sourcesContent":["import { IValidationRule } from '../interfaces/validationRule';\r\n\r\n/**\r\n * rule for required.\r\n */\r\nexport class EmailValidationRule implements IValidationRule {\r\n    /**\r\n     * init rule\r\n     *\r\n     * @param message\r\n     */\r\n    constructor(public propertyName: string, public message: string) {\r\n    }\r\n\r\n    /**\r\n     * action key.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    public get attribute(): string {\r\n        return 'email';\r\n    }\r\n\r\n    /**\r\n     * validate action.\r\n     *\r\n     * @param value\r\n     */\r\n    public validate(entity: any, value: any): Promise<boolean> {\r\n        let promise: Promise<boolean> = new Promise((resolve) => {\r\n            // http://emailregex.com/\r\n            let regex = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\r\n            resolve(value.match(regex));\r\n        });\r\n\r\n        return promise;\r\n    }\r\n}\r\n"]}