{"version":3,"sources":["validationRules/serverValidationRule.ts"],"names":[],"mappings":";;AAGA;;GAEG;AACH;IACI;;;;;OAKG;IACH,sCAAmB,YAAoB,EAAU,cAAgD,EAAS,OAAe;QAAtG,iBAAY,GAAZ,YAAY,CAAQ;QAAU,mBAAc,GAAd,cAAc,CAAkC;QAAS,YAAO,GAAP,OAAO,CAAQ;IACzH,CAAC;IAOD,sBAAW,mDAAS;QALpB;;;;WAIG;aACH;YACI,MAAM,CAAC,eAAe,CAAC;QAC3B,CAAC;;;OAAA;IAED;;;OAGG;IACI,+CAAQ,GAAf,UAAgB,KAAU;QACtB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IACL,mCAAC;AAAD,CA1BA,AA0BC,IAAA;AA1BY,oEAA4B","file":"serverValidationRule.js","sourcesContent":["import {Promise} from 'es6-promise';\r\nimport { IValidationRule } from '../interfaces/validationRule';\r\n\r\n/**\r\n * rule for real time server validation.\r\n */\r\nexport class RealTimeServerValidationRule implements IValidationRule {\r\n    /**\r\n     * inits rule\r\n     * \r\n     * @param validationCall\r\n     * @param message\r\n     */\r\n    constructor(public propertyName: string, private validationCall: (value: any) => Promise<boolean>, public message: string) {\r\n    }\r\n\r\n    /**\r\n     * action key\r\n     * \r\n     * @returns {string} \r\n     */\r\n    public get attribute(): string {\r\n        return 'rtServerError';\r\n    }\r\n\r\n    /**\r\n     * validate action\r\n     * @param value\r\n     */\r\n    public validate(value: any): Promise<boolean> {\r\n        return this.validationCall(value);\r\n    }\r\n}"]}