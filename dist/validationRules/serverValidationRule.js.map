{"version":3,"sources":["validationRules/serverValidationRule.ts"],"names":[],"mappings":";AAGA;;GAEG;AACH;IACI;;;;;OAKG;IACH,sCAAmB,YAAoB,EAAU,cAAgD,EAAS,OAAe;QAAtG,iBAAY,GAAZ,YAAY,CAAQ;QAAU,mBAAc,GAAd,cAAc,CAAkC;QAAS,YAAO,GAAP,OAAO,CAAQ;IACzH,CAAC;IAOD,sBAAW,mDAAS;QALpB;;;;WAIG;aACH;YACI,MAAM,CAAC,eAAe,CAAC;QAC3B,CAAC;;;OAAA;IAED;;;OAGG;IACI,+CAAQ,GAAf,UAAgB,KAAU;QACtB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IACL,mCAAC;AAAD,CA1BA,AA0BC,IAAA;AA1BY,oEAA4B","file":"serverValidationRule.js","sourcesContent":["import {Promise} from 'es6-promise';\nimport { IValidationRule } from '../interfaces/validationRule';\n\n/**\n * rule for real time server validation.\n */\nexport class RealTimeServerValidationRule implements IValidationRule {\n    /**\n     * inits rule\n     * \n     * @param validationCall\n     * @param message\n     */\n    constructor(public propertyName: string, private validationCall: (value: any) => Promise<boolean>, public message: string) {\n    }\n\n    /**\n     * action key\n     * \n     * @returns {string} \n     */\n    public get attribute(): string {\n        return 'rtServerError';\n    }\n\n    /**\n     * validate action\n     * @param value\n     */\n    public validate(value: any): Promise<boolean> {\n        return this.validationCall(value);\n    }\n}"]}