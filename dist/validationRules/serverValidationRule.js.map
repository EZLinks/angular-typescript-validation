{"version":3,"sources":["validationRules/serverValidationRule.ts"],"names":[],"mappings":";;AAEA;;GAEG;AACH;IACI;;;;;OAKG;IACH,sCAAmB,YAAoB,EAAU,cAA6D,EAAS,OAAe;QAAnH,iBAAY,GAAZ,YAAY,CAAQ;QAAU,mBAAc,GAAd,cAAc,CAA+C;QAAS,YAAO,GAAP,OAAO,CAAQ;IACtI,CAAC;IAOD,sBAAW,mDAAS;QALpB;;;;WAIG;aACH;YACI,OAAO,eAAe,CAAC;QAC3B,CAAC;;;OAAA;IAED;;;OAGG;IACI,+CAAQ,GAAf,UAAgB,MAAW,EAAE,KAAU;QACnC,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC9C,CAAC;IACL,mCAAC;AAAD,CA1BA,AA0BC,IAAA;AA1BY,oEAA4B","file":"serverValidationRule.js","sourcesContent":["import { IValidationRule } from '../interfaces/validationRule';\r\n\r\n/**\r\n * rule for real time server validation.\r\n */\r\nexport class RealTimeServerValidationRule implements IValidationRule {\r\n    /**\r\n     * inits rule\r\n     *\r\n     * @param validationCall\r\n     * @param message\r\n     */\r\n    constructor(public propertyName: string, private validationCall: (entity: any, value: any) => Promise<boolean>, public message: string) {\r\n    }\r\n\r\n    /**\r\n     * action key\r\n     *\r\n     * @returns {string}\r\n     */\r\n    public get attribute(): string {\r\n        return 'rtServerError';\r\n    }\r\n\r\n    /**\r\n     * validate action\r\n     * @param value\r\n     */\r\n    public validate(entity: any, value: any): Promise<boolean> {\r\n        return this.validationCall(entity, value);\r\n    }\r\n}\r\n"]}